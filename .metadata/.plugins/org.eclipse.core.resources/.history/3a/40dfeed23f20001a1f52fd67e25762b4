package com.codeshare.springboot.microservice.example.conversion.repository;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.codeshare.springboot.microservice.example.conversion.model.CCConvertionAmountResponseModel;
@Repository
public class CCRepository {
    @Autowired
    JdbcTemplate jdbcTemplate;
    class ConversionMapper implements RowMapper < CCConvertionAmountResponseModel > {
        @Override
        public CCConvertionAmountResponseModel mapRow(ResultSet rs, int rowNum) throws SQLException {
        	CCConvertionAmountResponseModel model = new CCConvertionAmountResponseModel();
        	model.setAmountValue(rs.getBigDecimal("amount"));
        	model.setTransactionID(rs.getString("transactionid"));
            return model;
        }
    }
    
    public List < CCConvertionAmountResponseModel > findAll() {
        return jdbcTemplate.query("select * from conversion", new ConversionMapper());
    }
    
    public CCConvertionAmountResponseModel findByTransactionID(String id) {
        return jdbcTemplate.queryForObject("select * from conversion where transactionid=?", new Object[] {
        		id
            },
            new BeanPropertyRowMapper < CCConvertionAmountResponseModel > (CCConvertionAmountResponseModel.class));
    }
    public int deleteById(String id) {
        return jdbcTemplate.update("delete from conversion where transactionid=?", new Object[] {
            id
        });
    }
    public int insert(CCConvertionAmountResponseModel model) {
        return jdbcTemplate.update("insert into conversion (transactionid, amount) " + "values(?,  ?)",
            new Object[] {
            		model.getTransactionID(), model.getAmountValue()
            });
    }
}
