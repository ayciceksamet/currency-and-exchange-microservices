package com.codeshare.springboot.microservice.example.conversion.restservice;

import java.math.BigDecimal;
import java.net.URI;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriBuilder;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import com.codeshare.springboot.microservice.example.conversion.model.CCConvertionAmountResponseModel;
import com.codeshare.springboot.microservice.example.conversion.model.CCModel;


	@Service
	public class ICCRestServiceImpl implements ICCRestService {
	

		@Autowired
		private Environment env;
		
		@Override
		public CCConvertionAmountResponseModel getCCAmount(BigDecimal amount, String from, String to) {
			CCConvertionAmountResponseModel response = new CCConvertionAmountResponseModel();
			
			/*BigDecimal cachedRate = cache.getCachedRate(ratePair);
			if(null != cachedRate) {
				response.setRateValue(cachedRate);
				response.setError(null);
				System.out.println("Returing data for " + ratePair + " from Cache");
				return response;
			}*/

			HttpHeaders headers = new HttpHeaders();
			headers.set("Accept", "application/json");
			
			String pairValue = from.concat(to);
			
			

			RestTemplate restTemplate = new RestTemplate();
			
		    
		    

		    Map<String, String> uriVariables = new HashMap<>();
		    uriVariables.put("currencypair", pairValue);

		    ResponseEntity<CCModel> responseEntity = restTemplate.postForObject(
		    		"http://localhost:8090/exchangerate/{currencypair}", CCModel.class,
		        uriVariables);
		    
		    System.out.println(responseEntity.getBody().getExchangeRate());
		    
		    
			
			
			//UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(env.getProperty("exchange.service.uri")).queryParams(vars).build();
	
			//CCModel rates = restTemplate.getForObject(env.getProperty("exchange.service.uri"), CCModel.class, vars);
			
			//BigDecimal convertedAmount = rates.getExchangeRate().multiply(amount);
			
			//response.setAmountValue(convertedAmount);
			
			//String toPair = ratePair.replaceAll(ratePair.substring(0, 3),"");
			
		   /* String result = rates.getQuotes().entrySet().stream()
		    		.filter(map -> toPair.equals(map.getKey().replaceAll(ratePair.substring(0, 3),"")))
		    		.map(map -> map.getValue())
		    		.collect(Collectors.joining());
		    */
		    /*if("".equalsIgnoreCase(result) || "1".equalsIgnoreCase(result)) {
		    	CCErrorModel errormodel = new ERErrorModel();
		    	errormodel.setCode("400");
		    	errormodel.setType("Bad Request");
		    	errormodel.setInfo("Please enter valid currency pair value !");
		    	response.setError(errormodel);
		    	response.setAmountValue(BigDecimal.ZERO);
		    	return response;
		    }*/
		    
		   /* if (rates.getSuccess()) {
		    	String exRate = result;
		    	BigDecimal bgExRate = new BigDecimal(exRate);
		    	response.setAmountValue(bgExRate);
		    	cache.cacheRate(ratePair, bgExRate);
		    } else {
		    	response.setError(rates.getError());
		    	response.setAmountValue(BigDecimal.ZERO);
		    }*/
	
	        return response;
			
		}

}
